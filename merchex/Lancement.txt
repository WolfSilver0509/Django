Démarrer un projet Django :
Etape 1 : Installer django et créer un projet
pip install django
Etape 2 : Créer un projet
django-admin startproject merchex
Etape 3 : Exécuter le serveur ( dans merchex )
python manage.py runserver
Etape 4 : Créer la base de données du projet
python manage.py migrate
Etape 5 : Créer le code de base de l'applications (listings repo d'application)
python manage.py startapp listings
Etape 6 : Aller dans le fichier settings.py du projet et ajouter l'application
dans Installed_apps rajouter listings
Afficher une nouvelle page dans le projet Django:
Etape 1 : Créer une vue dans le fichier views.py de l'application
Crée une vue qui affiche hello django en titre 1
Etape 2 : Créer une url dans le fichier urls.py de l'application
Crée une url qui affiche la vue avec le path /hello
se rendre sur  http://127.0.0.1:8000/hello/ pour voir le résultat
Etape 3 : Faire correspondre l'url de l'application avec un modèle d'url
dans le fichier urls.py du projet
création d'une 3 eme urls
Etape 4 : Renvoyer une réponse http avec la vue
création d'une fonction dans la vue listings qui renvoie une réponse http
Etape 5 : Créer un modèle dans le fichier models.py de l'application
création d'un modèle Listing
Etape 6 : Créer une migration pour le modèle
python manage.py makemigrations
etape 7 : Appliquer la migration
python manage.py migrate
Enregistrer un modèle dans la base de données:
Etape 1 : aller dans le shell de manage.py
python manage.py shell
Etape 2 : importer le modèle Listing
from listings.models import Listing
Etape 3 : Créer un objet Listing
band = Band()
Etape 4 : ajouter une instance de band
band.name = "The Beatles"
Etape 5 : sauvegarder l'instance
band.save()title.save
Etape 6 : afficher les instances de band
band
Etape 7 : crée une instance en une seule ligne
band = Band.objects.create(name='Foo Fighters')
Etape 8 : Verifier combien d'objet de groupe
Band.objects.count()
Etape 9 : afficher les instances de band
Band.objects.all() ( résultat avec QuerySet ressemble à une list en python)
Mettre à jour la view pour afficher les données de la base de données
Etape 1 : Obtenir les données de la base de données dans la vue
dans views.py de l'application rajouter la récupération des données
Pour crée un superutilisateur pour l'interface admin de django
python manage.py createsuperuser ( glaxer / admin ) / heloise / heloise
Pour ajouter un gabarit dans le projet
etape 1 créer un dossier templates dans le dossier du projet
etape 2 créer un dossier listings dans le dossier templates
etape 3 créer un fichier au noms de votre page dans le dossier listings
etape 4 Dans le dossier Modéle dans listings
etape 5 Dans notre fonction dans la views on rajoute un return
etape 6 Un return avec un render qui prend en paramètre la requête, le nom du gabarit et un contexte
ex: return render(request, 'listings/contact_us.html')
Pour rassembler les gabaris dans un seul endroit afin de mettre en place le DRY (don't repeat yourself)
Etape 1 : crée un fichier base.html dans le dossier templates
Etape 2 : crée un block content dans le fichier base.html et ajouter extends dans les fichiers html :
    {% extends 'base.html' %}
    {% block content %}
    {% endblock %}
Etape 3 :  et le mettre dans les autres html pour importer la base html afin de ne pas la réecrire
Pour ajouter un style CSS à une de nos page html
Etape 1 : créer un dossier static dans le dossier du projet
Etape 2 : créer un dossier css dans le dossier static
Etape 3 : créer un fichier style.css dans le dossier css
Etape 4 : ajouter le style dans le fichier style.css
Etape 5 : ajouter le style dans le fichier base.html avec la balise link
Etape 6 : ajouter le chargement du fichier css avec {% load static %} en haut de notre base.html





